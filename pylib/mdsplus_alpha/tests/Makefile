# Makefile.in generated by automake 1.15 from Makefile.am.
# mdsobjects/python/tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2014 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# //////////////////////////////////////////////////////////////////////////// #
# ///  TESTS SECTION   /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

am__is_gnu_make = { \
  if test -z '$(MAKELEVEL)'; then \
    false; \
  elif test -n '$(MAKE_HOST)'; then \
    true; \
  elif test -n '$(MAKE_VERSION)' && test -n '$(CURDIR)'; then \
    true; \
  else \
    false; \
  fi; \
}
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/mdsplus
pkgincludedir = $(includedir)/mdsplus
pkglibdir = $(libdir)/mdsplus
pkglibexecdir = $(libexecdir)/mdsplus
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
#am__append_1 = ${ENABLE_SANITIZE_OPTIONS}=${SANITIZE_SUPPRESSIONS}:${SAN_OPTIONS}:${${ENABLE_SANITIZE_OPTIONS}}:start_deactivated=1:exitcode=1 \
#	LD_PRELOAD=${ENABLE_SANITIZE_LIBPATH} \
#	TEST_TIMEUNIT=5
#am__append_2 = $(shell ${_check_sanitize_ldd} || \
#	echo --skip;) $(shell test \
#	x"${ENABLE_SANITIZE}" != x"thread" || \
#	echo --skip;)
check_PROGRAMS =
subdir = mdsobjects/python/tests
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/ac_defun_local.m4 \
	$(top_srcdir)/m4/ax_check_java_home.m4 \
	$(top_srcdir)/m4/ax_compare_version.m4 \
	$(top_srcdir)/m4/ax_compiler_vendor.m4 \
	$(top_srcdir)/m4/ax_compiler_version.m4 \
	$(top_srcdir)/m4/m4_ac_search_readline.m4 \
	$(top_srcdir)/m4/m4_am_path_xml2.m4 \
	$(top_srcdir)/m4/m4_ax_check_enable_debug.m4 \
	$(top_srcdir)/m4/m4_ax_configure_args.m4 \
	$(top_srcdir)/m4/m4_ax_docker_build.m4 \
	$(top_srcdir)/m4/m4_ax_is_release.m4 \
	$(top_srcdir)/m4/m4_ax_mdsplus_directories.m4 \
	$(top_srcdir)/m4/m4_ax_mdsplus_testing.m4 \
	$(top_srcdir)/m4/m4_ax_perl_module_version.m4 \
	$(top_srcdir)/m4/m4_ax_prog_doxygen.m4 \
	$(top_srcdir)/m4/m4_ax_python_architecture.m4 \
	$(top_srcdir)/m4/m4_ax_python_module.m4 \
	$(top_srcdir)/m4/m4_ax_sanitize_check.m4 \
	$(top_srcdir)/m4/m4_ax_valgrind_check.m4 \
	$(top_srcdir)/m4/pkg.m4 $(top_srcdir)/m4/visibility.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
DIST_COMMON = $(srcdir)/Makefile.am $(am__DIST_COMMON)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/include/config.h
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
am__tty_colors_dummy = \
  mgn= red= grn= lgn= blu= brg= std=; \
  am__color_tests=no
am__tty_colors = { \
  $(am__tty_colors_dummy); \
  if test "X$(AM_COLOR_TESTS)" = Xno; then \
    am__color_tests=no; \
  elif test "X$(AM_COLOR_TESTS)" = Xalways; then \
    am__color_tests=yes; \
  elif test "X$$TERM" != Xdumb && { test -t 1; } 2>/dev/null; then \
    am__color_tests=yes; \
  fi; \
  if test $$am__color_tests = yes; then \
    red='[0;31m'; \
    grn='[0;32m'; \
    lgn='[1;32m'; \
    blu='[1;34m'; \
    mgn='[0;35m'; \
    brg='[1m'; \
    std='[m'; \
  fi; \
}
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__recheck_rx = ^[ 	]*:recheck:[ 	]*
am__global_test_result_rx = ^[ 	]*:global-test-result:[ 	]*
am__copy_in_global_log_rx = ^[ 	]*:copy-in-global-log:[ 	]*
# A command that, given a newline-separated list of test names on the
# standard input, print the name of the tests that are to be re-run
# upon "make recheck".
am__list_recheck_tests = $(AWK) '{ \
  recheck = 1; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
        { \
          if ((getline line2 < ($$0 ".log")) < 0) \
	    recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[nN][Oo]/) \
        { \
          recheck = 0; \
          break; \
        } \
      else if (line ~ /$(am__recheck_rx)[yY][eE][sS]/) \
        { \
          break; \
        } \
    }; \
  if (recheck) \
    print $$0; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# A command that, given a newline-separated list of test names on the
# standard input, create the global log from their .trs and .log files.
am__create_global_log = $(AWK) ' \
function fatal(msg) \
{ \
  print "fatal: making $@: " msg | "cat >&2"; \
  exit 1; \
} \
function rst_section(header) \
{ \
  print header; \
  len = length(header); \
  for (i = 1; i <= len; i = i + 1) \
    printf "="; \
  printf "\n\n"; \
} \
{ \
  copy_in_global_log = 1; \
  global_test_result = "RUN"; \
  while ((rc = (getline line < ($$0 ".trs"))) != 0) \
    { \
      if (rc < 0) \
         fatal("failed to read from " $$0 ".trs"); \
      if (line ~ /$(am__global_test_result_rx)/) \
        { \
          sub("$(am__global_test_result_rx)", "", line); \
          sub("[ 	]*$$", "", line); \
          global_test_result = line; \
        } \
      else if (line ~ /$(am__copy_in_global_log_rx)[nN][oO]/) \
        copy_in_global_log = 0; \
    }; \
  if (copy_in_global_log) \
    { \
      rst_section(global_test_result ": " $$0); \
      while ((rc = (getline line < ($$0 ".log"))) != 0) \
      { \
        if (rc < 0) \
          fatal("failed to read from " $$0 ".log"); \
        print line; \
      }; \
      printf "\n"; \
    }; \
  close ($$0 ".trs"); \
  close ($$0 ".log"); \
}'
# Restructured Text title.
am__rst_title = { sed 's/.*/   &   /;h;s/./=/g;p;x;s/ *$$//;p;g' && echo; }
# Solaris 10 'make', and several other traditional 'make' implementations,
# pass "-e" to $(SHELL), and POSIX 2008 even requires this.  Work around it
# by disabling -e (using the XSI extension "set +e") if it's set.
am__sh_e_setup = case $$- in *e*) set +e;; esac
# Default flags passed to test drivers.
am__common_driver_flags = \
  --color-tests "$$am__color_tests" \
  --enable-hard-errors "$$am__enable_hard_errors" \
  --expect-failure "$$am__expect_failure"
# To be inserted before the command running the test.  Creates the
# directory for the log if needed.  Stores in $dir the directory
# containing $f, in $tst the test, in $log the log.  Executes the
# developer- defined test setup AM_TESTS_ENVIRONMENT (if any), and
# passes TESTS_ENVIRONMENT.  Set up options for the wrapper that
# will run the test scripts (or their associated LOG_COMPILER, if
# thy have one).
am__check_pre = \
$(am__sh_e_setup);					\
$(am__vpath_adj_setup) $(am__vpath_adj)			\
$(am__tty_colors);					\
srcdir=$(srcdir); export srcdir;			\
case "$@" in						\
  */*) am__odir=`echo "./$@" | sed 's|/[^/]*$$||'`;;	\
    *) am__odir=.;; 					\
esac;							\
test "x$$am__odir" = x"." || test -d "$$am__odir" 	\
  || $(MKDIR_P) "$$am__odir" || exit $$?;		\
if test -f "./$$f"; then dir=./;			\
elif test -f "$$f"; then dir=;				\
else dir="$(srcdir)/"; fi;				\
tst=$$dir$$f; log='$@'; 				\
if test -n '$(DISABLE_HARD_ERRORS)'; then		\
  am__enable_hard_errors=no; 				\
else							\
  am__enable_hard_errors=yes; 				\
fi; 							\
case " $(XFAIL_TESTS) " in				\
  *[\ \	]$$f[\ \	]* | *[\ \	]$$dir$$f[\ \	]*) \
    am__expect_failure=yes;;				\
  *)							\
    am__expect_failure=no;;				\
esac; 							\
$(AM_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)
# A shell command to get the names of the tests scripts with any registered
# extension removed (i.e., equivalently, the names of the test logs, with
# the '.log' extension removed).  The result is saved in the shell variable
# '$bases'.  This honors runtime overriding of TESTS and TEST_LOGS.  Sadly,
# we cannot use something simpler, involving e.g., "$(TEST_LOGS:.log=)",
# since that might cause problem with VPATH rewrites for suffix-less tests.
# See also 'test-harness-vpath-rewrite.sh' and 'test-trs-basic.sh'.
am__set_TESTS_bases = \
  bases='$(TEST_LOGS)'; \
  bases=`for i in $$bases; do echo $$i; done | sed 's/\.log$$//'`; \
  bases=`echo $$bases`
RECHECK_LOGS = $(TEST_LOGS)
AM_RECURSIVE_TARGETS = check recheck
TEST_SUITE_LOG = test-suite.log
am__test_logs1 = $(TESTS:=.log)
am__test_logs2 = $(am__test_logs1:.log=.log)
TEST_LOGS = $(am__test_logs2:.py.log=.log)
PY_LOG_DRIVER = $(SHELL) $(top_srcdir)/conf/test-driver
PY_LOG_COMPILE = $(PY_LOG_COMPILER) $(AM_PY_LOG_FLAGS) $(PY_LOG_FLAGS)
am__set_b = \
  case '$@' in \
    */*) \
      case '$*' in \
        */*) b='$*';; \
          *) b=`echo '$@' | sed 's/\.log$$//'`; \
       esac;; \
    *) \
      b='$*';; \
  esac
am__DIST_COMMON = $(srcdir)/../../../testing/testing.am \
	$(srcdir)/Makefile.in $(top_srcdir)/conf/test-driver
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/missing aclocal-1.15
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 1
AUTOCONF = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/missing autoconf
AUTOHEADER = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/missing autoheader
AUTOMAKE = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/missing automake-1.15
AWK = gawk
CAMSHR = camshr
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -I/usr/pppl/nstx/R6_64/REQs/include/libxml2/libxml  -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -fpic -shared-libgcc -fsigned-char -fno-strict-aliasing
CFLAG_VISIBILITY = -fvisibility=hidden
CLOCK_GETTIME_LIB = -lrt
CPP = gcc -E
CPPFLAGS = -I${top_srcdir}/include -I${top_builddir}/include 
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
D3DLIB = 
D3D_FFLAGS = 
D3D_PACKAGE = 
DC1394_SUPPORT = 
DC1394_SUPPORT2 = 
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DNET_STUB = 
DOXYGEN = doxygen
DOXYGEN_PAPER_SIZE = 
DX_CONFIG = doxygen.cfg
DX_DOCDIR = docs
DX_DOT = 
DX_DOXYGEN = /usr/bin/doxygen
DX_DVIPS = 
DX_EGREP = /bin/egrep
DX_ENV =  SRCDIR='/u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha' PROJECT='mdsplus' DOCDIR='docs' VERSION='6.0a' PERL_PATH='/usr/bin/perl' HAVE_DOT='NO' GENERATE_MAN='NO' GENERATE_RTF='NO' GENERATE_XML='NO' GENERATE_HTMLHELP='NO' GENERATE_CHI='NO' GENERATE_HTML='YES' GENERATE_LATEX='YES'
DX_FLAG_chi = 0
DX_FLAG_chm = 0
DX_FLAG_doc = 1
DX_FLAG_dot = 0
DX_FLAG_html = 1
DX_FLAG_man = 0
DX_FLAG_pdf = 1
DX_FLAG_ps = 0
DX_FLAG_rtf = 0
DX_FLAG_xml = 0
DX_HHC = 
DX_LATEX = 
DX_MAKEINDEX = /usr/bin/makeindex
DX_PDFLATEX = /usr/bin/pdflatex
DX_PERL = /usr/bin/perl
DX_PROJECT = mdsplus
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
ENABLE_SANITIZE = no
ENABLE_SANITIZE_LIBPATH = 
ENABLE_SANITIZE_OPTIONS = SAN_OPTIONS
EXEEXT = 
EXPORTS_FILE = 
FC = gfortran
FCFLAGS = -g -O2 -fno-range-check -fpic -fno-backslash
FEXECLIBDIR = -L
FORLD = gfortran
FOR_LDFLAGS = 
FOR_LINKSHARED = -shared 
GEN_DEVICE = 
GLOBUS_CFLAGS = 
GLOBUS_FLAVOR = 
GLOBUS_LIBS = 
GLOBUS_LOCATION = 
GREP = /bin/grep
HAVE_DOCKER = no
HAVE_VISIBILITY = 1
HAVE_WINE = no
HAVE_WINEBOOT = 
HAVE_WINECONSOLE = no
HAVE_WINEPATH = 
HDF5_APS = 
HDF5_INCS = 
HDF5_LIBS = 
HUP_TO_INETD = kill -HUP `/sbin/pidof inetd`
HUP_TO_XINETD = /etc/rc.d/init.d/xinetd restart
IDLMDSEVENT = idlmdsevent
IDLMDSWIDGETS = idlmdswidgets
IDL_INC = -I/usr/pppl/itt/idl/idl82/external
IDL_LIB = 
INSTALL = /usr/bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
JAR = /usr/pppl/java/x64/jdk1.6.0_16/bin/jar
JAVAC = /usr/pppl/java/x64/jdk1.6.0_16/bin/javac
JAVACFLAGS = -encoding UTF-8
JAVAC_PATH_NAME = 
JAVAVERSION = 
JAVA_APS = $(JAVA_APS)
JDK_CFLAGS = -I/usr/pppl/java/x64/jdk1.6.0_16/include -I/usr/pppl/java/x64/jdk1.6.0_16/include/linux
JDK_DIR = /usr/pppl/java/x64/jdk1.6.0_16
JDK_LIVECONNECT = /usr/pppl/java/x64/jdk1.6.0_16/jre/lib/plugin.jar
LD = gcc
LDARC = -Wl,-Bstatic 
LDFLAGS = 
LDSHARE = -Wl,-Bdynamic 
LD_LDARC = -Bstatic 
LD_LDSHARE = -Bdynamic 
LIBDL = -ldl
LIBM = -lm
LIBOBJS = 
LIBPATH = LD_LIBRARY_PATH
LIBPRE = lib
LIBREADLINE = -lreadline -ltermcap
LIBRESOLV = -lresolv
LIBRT = -lrt
LIBS = 
LIBSOCKET = 
LIBXEXT = -lXext
LIBXP = -lXp
LINKJNI = -shared 
LINKMODULE = -shared 
LINKSHARED = -shared 
LINKWHOLE = 
LOG_COMPILER = 
LOG_DRIVER = $(SHELL) $(top_srcdir)/conf/test-driver
LTLIBOBJS = 
LV = 
LV_CINTOOLS = 
MACOSX = 
MAINT = #
MAKEBINDIR = $(top_builddir)/bin64/
MAKEETCDIR = $(top_builddir)/etc/
MAKEINFO = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/missing makeinfo
MAKELIBDIR = $(top_builddir)/lib64/
MAKESHLIBDIR = $(top_builddir)/lib64/
MAKEUIDDIR = $(top_builddir)/uid64/
MDSSQL = mdssql
MDSTCPIP = mdstcpip
MITDEVICESIO_TARGETS = $(top_builddir)/lib64/libMitDevicesIO.so $(top_builddir)/lib64/libMitDevicesIO.a $(top_builddir)/bin64/daq_server
MKDIR_P = /bin/mkdir -p
MOTIF_APS = $(MOTIF_APS)
MOTIF_LDARC = 
MOTIF_LDSHARE = 
MOTIF_LD_LDARC = 
MOTIF_LD_LDSHARE = 
NEED_SEMUN = 
NOSETESTS = 
OBJEXT = o
PACKAGE = mdsplus
PACKAGE_BUGREPORT = mdsplus@lists.psfc.mit.edu
PACKAGE_NAME = MDSplus
PACKAGE_STRING = MDSplus 6.0a
PACKAGE_TARNAME = mdsplus
PACKAGE_URL = 
PACKAGE_VERSION = 6.0a
PATH_SEPARATOR = :
PERL = perl
PKG_CONFIG = 
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
PYTHON = /usr/bin/python2.4
PYTHON_ARCHITECTURE = 32bit
PYTHON_EXEC_PREFIX = ${exec_prefix}
PYTHON_INCLUDE_DIR = 
PYTHON_PLATFORM = linux2
PYTHON_PREFIX = ${prefix}
PYTHON_VERSION = 2.4
PY_LOG_COMPILER = /usr/bin/python2.4 -B $(top_srcdir)/testing/testing.py
PY_LOG_FLAGS =  $(am__append_2)
RANLIB = ranlib
READLINE_CPPFLAGS = 
READLINE_LDFLAGS = 
READLINE_LIBS = -lreadline -ltermcap
READLINK = 
RELEASE_BRANCH = unknown
RELEASE_COMMIT = unknown
RELEASE_DATE = Tue Aug 23 14:25:38 EDT 2016
RELEASE_MAJOR = 1
RELEASE_MINOR = 0
RELEASE_RELEASE = 0
RELEASE_TAG = _release-1-0-0
REMCAM = remcam
REMCAMLIB = RemCamShr
RMIC = /usr/pppl/java/x64/jdk1.6.0_16/bin/rmic
RPATHLINK = -Wl,-rpath-link
SED = /bin/sed
SET_MAKE = 
SHARETYPE = .so
SHARETYPEJNI = .so
SHARETYPEMOD = .so
SHELL = /bin/sh
SRBINCLUDE = 
SRBLIB = 
STRIP = 
SYBASE_INC = -I/usr/pppl/freetds/0.62.4/include -DSYBASE
SYBASE_LIB = -L/usr/pppl/freetds/0.62.4/lib -Bstatic  -lsybdb -Bdynamic 
TARGET_ARCH = -m64
TAR_EXCLUDE = --exclude
TDIC = tdic
TESTS_ENVIRONMENT = MDSPLUS_DIR=$(abs_top_srcdir) MDS_PATH=$(abs_top_srcdir)/tdi LD_LIBRARY_PATH=$(top_builddir)/lib64/$(if ${LD_LIBRARY_PATH},:${LD_LIBRARY_PATH}) PYTHONPATH=$(prefix)/mdsobjects/python:$(abs_top_srcdir)/mdsobjects/python:$(abs_top_srcdir)/testing$(if ${PYTHONPATH},:${PYTHONPATH}) PYTHONDONTWRITEBYTECODE=yes $(am__append_1)
THREAD = -pthread
UIL = env LANG=en_US /usr/bin/uil
USE_PIPED_MESSAGING = 
USE_TM_GMTOFF = 
VALGRIND = valgrind
VALGRIND_ENABLED = no

# Skipping child programs that are launched inside python classes
#
VALGRIND_FLAGS = \
                 --trace-children-skip=*/ld \
                 --trace-children-skip=*/collect2 \
                 --trace-children-skip=*/ldconfig \
                 --trace-children-skip=*/sh

VALGRIND_HAVE_TOOL_drd = drd
VALGRIND_HAVE_TOOL_exp_sgcheck = exp-sgcheck
VALGRIND_HAVE_TOOL_helgrind = helgrind
VALGRIND_HAVE_TOOL_memcheck = memcheck
VALGRIND_memcheck_FLAGS = 
VERSION = 6.0a
VS = 
VS_ARCH = 
VS_DIR = 
WARNFLAGS = -Wall
WINDRES = :
XMKMF = 
XML2_CONFIG = /usr/pppl/nstx/R5_64/REQs/bin//xml2-config
XML_CFLAGS = 
XML_CPPFLAGS = -I/usr/pppl/nstx/R5_64/REQs//include/libxml2
XML_LIBS = -L/usr/pppl/nstx/R5_64/REQs//lib -lxml2 -lz -lm
XM_LIBS = -lMrm -lXm
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
abs_builddir = /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/mdsobjects/python/tests
abs_srcdir = /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/mdsobjects/python/tests
abs_top_builddir = /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha
abs_top_srcdir = /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_FC = gfortran
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = /usr/pppl/nstx/R6_64/mdsplus_alpha/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = /usr/pppl/nstx/R6_64/mdsplus_alpha/share
datarootdir = /usr/pppl/nstx/R6_64/mdsplus_alpha/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = /usr/pppl/nstx/R6_64/mdsplus_alpha
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = /usr/pppl/nstx/R6_64/mdsplus_alpha/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /u/gtchilin/sandbox/mdsplus/R6_64/mdsplus_alpha/conf/install-sh
libdir = /usr/pppl/nstx/R6_64/mdsplus_alpha/lib
libexecdir = /usr/pppl/nstx/R6_64/mdsplus_alpha/libexec
localedir = /usr/pppl/nstx/R6_64/mdsplus_alpha/share/locale
localstatedir = /usr/pppl/nstx/R6_64/mdsplus_alpha/var
mandir = /usr/pppl/nstx/R6_64/mdsplus_alpha/share/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
pkgpyexecdir = ${pyexecdir}/mdsplus
pkgpythondir = ${pythondir}/mdsplus
prefix = /usr/pppl/nstx/R6_64/mdsplus_alpha
program_transform_name = s,x,x,
psdir = ${docdir}
pyexecdir = ${exec_prefix}/lib64/python2.4/site-packages
pythondir = ${prefix}/lib/python2.4/site-packages
sbindir = /usr/pppl/nstx/R6_64/mdsplus_alpha/sbin
sharedstatedir = /usr/pppl/nstx/R6_64/mdsplus_alpha/com
srcdir = .
sysconfdir = /usr/pppl/nstx/R6_64/mdsplus_alpha/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../../../
top_builddir = ../../..
top_srcdir = ../../..
uiddir = /usr/pppl/nstx/R6_64/mdsplus_alpha/uid64
TEST_CFLAGS = -I${top_srcdir}/testing
TEST_LIBS = -lMdsTestShr -lm -pthread -lrt

# ///  select test form env variable  //////////////////////////////////////// #
TEST_BUILDTYPE = local
SUFFIXES = .log .tap .xml
.PRECIUS = %.log %.tap %.xml

# // check if libpath is correct or skip python tests
#_check_sanitize_ldd = \
#   ( test "${ENABLE_SANITIZE}" != "no" -a -n "${ENABLE_SANITIZE_LIBPATH}" && \
#     ldd ${MAKESHLIBDIR}/libMdsTestShr.so | grep ${ENABLE_SANITIZE_LIBPATH}  > /dev/null; )

TEST_BUILD_TAP = test-build.tap
TEST_SUITE_TAP = test-suite.tap
TEST_EXTENSIONS = .py
TESTS = \
        dataUnitTest.py \
        treeUnitTest.py \
        threadsUnitTest.py \
        segmentsUnitTest.py


# if VALGRIND_TESTS is defined this list is executed with valgrind
VALGRIND_TESTS = \
                 dataUnitTest.py \
                 treeUnitTest.py \
                 segmentsUnitTest.py


# DISABLE PYTHON LEAK DETECTION: This suppression file shall be removed when
# python will finally introduce the patch to detect if valgrind is running ..
# take a look at the file for details. You can also disable this if you are
# using a Python compiled with --without-pymalloc (only for valgrind as it is 5
# times slower to run)
#
VALGRIND_SUPPRESSIONS_FILES_PY = \
         ${top_srcdir}/conf/valgrind-python-disableleak.supp


# Files produced by tests that must be purged
#
MOSTLYCLEANFILES = 
check_SCRIPTS = $(TESTS)
all: all-am

.SUFFIXES:
.SUFFIXES: .log .tap .xml .py .py$(EXEEXT) .trs
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am $(srcdir)/../../../testing/testing.am $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign mdsobjects/python/tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign mdsobjects/python/tests/Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(srcdir)/../../../testing/testing.am $(am__empty):

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)
tags TAGS:

ctags CTAGS:

cscope cscopelist:


# Recover from deleted '.trs' file; this should ensure that
# "rm -f foo.log; make foo.trs" re-run 'foo.test', and re-create
# both 'foo.log' and 'foo.trs'.  Break the recipe in two subshells
# to avoid problems with "make -n".
.log.trs:
	rm -f $< $@
	$(MAKE) $(AM_MAKEFLAGS) $<

# Leading 'am--fnord' is there to ensure the list of targets does not
# expand to empty, as could happen e.g. with make check TESTS=''.
am--fnord $(TEST_LOGS) $(TEST_LOGS:.log=.trs): $(am__force_recheck)
am--force-recheck:
	@:

$(TEST_SUITE_LOG): $(TEST_LOGS)
	@$(am__set_TESTS_bases); \
	am__f_ok () { test -f "$$1" && test -r "$$1"; }; \
	redo_bases=`for i in $$bases; do \
	              am__f_ok $$i.trs && am__f_ok $$i.log || echo $$i; \
	            done`; \
	if test -n "$$redo_bases"; then \
	  redo_logs=`for i in $$redo_bases; do echo $$i.log; done`; \
	  redo_results=`for i in $$redo_bases; do echo $$i.trs; done`; \
	  if $(am__make_dryrun); then :; else \
	    rm -f $$redo_logs && rm -f $$redo_results || exit 1; \
	  fi; \
	fi; \
	if test -n "$$am__remaking_logs"; then \
	  echo "fatal: making $(TEST_SUITE_LOG): possible infinite" \
	       "recursion detected" >&2; \
	elif test -n "$$redo_logs"; then \
	  am__remaking_logs=yes $(MAKE) $(AM_MAKEFLAGS) $$redo_logs; \
	fi; \
	if $(am__make_dryrun); then :; else \
	  st=0;  \
	  errmsg="fatal: making $(TEST_SUITE_LOG): failed to create"; \
	  for i in $$redo_bases; do \
	    test -f $$i.trs && test -r $$i.trs \
	      || { echo "$$errmsg $$i.trs" >&2; st=1; }; \
	    test -f $$i.log && test -r $$i.log \
	      || { echo "$$errmsg $$i.log" >&2; st=1; }; \
	  done; \
	  test $$st -eq 0 || exit 1; \
	fi
	@$(am__sh_e_setup); $(am__tty_colors); $(am__set_TESTS_bases); \
	ws='[ 	]'; \
	results=`for b in $$bases; do echo $$b.trs; done`; \
	test -n "$$results" || results=/dev/null; \
	all=`  grep "^$$ws*:test-result:"           $$results | wc -l`; \
	pass=` grep "^$$ws*:test-result:$$ws*PASS"  $$results | wc -l`; \
	fail=` grep "^$$ws*:test-result:$$ws*FAIL"  $$results | wc -l`; \
	skip=` grep "^$$ws*:test-result:$$ws*SKIP"  $$results | wc -l`; \
	xfail=`grep "^$$ws*:test-result:$$ws*XFAIL" $$results | wc -l`; \
	xpass=`grep "^$$ws*:test-result:$$ws*XPASS" $$results | wc -l`; \
	error=`grep "^$$ws*:test-result:$$ws*ERROR" $$results | wc -l`; \
	if test `expr $$fail + $$xpass + $$error` -eq 0; then \
	  success=true; \
	else \
	  success=false; \
	fi; \
	br='==================='; br=$$br$$br$$br$$br; \
	result_count () \
	{ \
	    if test x"$$1" = x"--maybe-color"; then \
	      maybe_colorize=yes; \
	    elif test x"$$1" = x"--no-color"; then \
	      maybe_colorize=no; \
	    else \
	      echo "$@: invalid 'result_count' usage" >&2; exit 4; \
	    fi; \
	    shift; \
	    desc=$$1 count=$$2; \
	    if test $$maybe_colorize = yes && test $$count -gt 0; then \
	      color_start=$$3 color_end=$$std; \
	    else \
	      color_start= color_end=; \
	    fi; \
	    echo "$${color_start}# $$desc $$count$${color_end}"; \
	}; \
	create_testsuite_report () \
	{ \
	  result_count $$1 "TOTAL:" $$all   "$$brg"; \
	  result_count $$1 "PASS: " $$pass  "$$grn"; \
	  result_count $$1 "SKIP: " $$skip  "$$blu"; \
	  result_count $$1 "XFAIL:" $$xfail "$$lgn"; \
	  result_count $$1 "FAIL: " $$fail  "$$red"; \
	  result_count $$1 "XPASS:" $$xpass "$$red"; \
	  result_count $$1 "ERROR:" $$error "$$mgn"; \
	}; \
	{								\
	  echo "$(PACKAGE_STRING): $(subdir)/$(TEST_SUITE_LOG)" |	\
	    $(am__rst_title);						\
	  create_testsuite_report --no-color;				\
	  echo;								\
	  echo ".. contents:: :depth: 2";				\
	  echo;								\
	  for b in $$bases; do echo $$b; done				\
	    | $(am__create_global_log);					\
	} >$(TEST_SUITE_LOG).tmp || exit 1;				\
	mv $(TEST_SUITE_LOG).tmp $(TEST_SUITE_LOG);			\
	if $$success; then						\
	  col="$$grn";							\
	 else								\
	  col="$$red";							\
	  test x"$$VERBOSE" = x || cat $(TEST_SUITE_LOG);		\
	fi;								\
	echo "$${col}$$br$${std}"; 					\
	echo "$${col}Testsuite summary for $(PACKAGE_STRING)$${std}";	\
	echo "$${col}$$br$${std}"; 					\
	create_testsuite_report --maybe-color;				\
	echo "$$col$$br$$std";						\
	if $$success; then :; else					\
	  echo "$${col}See $(subdir)/$(TEST_SUITE_LOG)$${std}";		\
	  if test -n "$(PACKAGE_BUGREPORT)"; then			\
	    echo "$${col}Please report to $(PACKAGE_BUGREPORT)$${std}";	\
	  fi;								\
	  echo "$$col$$br$$std";					\
	fi;								\
	$$success || exit 1

check-TESTS:
	@list='$(RECHECK_LOGS)';           test -z "$$list" || rm -f $$list
	@list='$(RECHECK_LOGS:.log=.trs)'; test -z "$$list" || rm -f $$list
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	trs_list=`for i in $$bases; do echo $$i.trs; done`; \
	log_list=`echo $$log_list`; trs_list=`echo $$trs_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) TEST_LOGS="$$log_list"; \
	exit $$?;
recheck: all $(check_PROGRAMS) $(check_SCRIPTS)
	@test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)
	@set +e; $(am__set_TESTS_bases); \
	bases=`for i in $$bases; do echo $$i; done \
	         | $(am__list_recheck_tests)` || exit 1; \
	log_list=`for i in $$bases; do echo $$i.log; done`; \
	log_list=`echo $$log_list`; \
	$(MAKE) $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) \
	        am__force_recheck=am--force-recheck \
	        TEST_LOGS="$$log_list"; \
	exit $$?
.py.log:
	@p='$<'; \
	$(am__set_b); \
	$(am__check_pre) $(PY_LOG_DRIVER) --test-name "$$f" \
	--log-file $$b.log --trs-file $$b.trs \
	$(am__common_driver_flags) $(AM_PY_LOG_DRIVER_FLAGS) $(PY_LOG_DRIVER_FLAGS) -- $(PY_LOG_COMPILE) \
	"$$tst" $(AM_TESTS_FD_REDIRECT)
#.py$(EXEEXT).log:
#	@p='$<'; \
#	$(am__set_b); \
#	$(am__check_pre) $(PY_LOG_DRIVER) --test-name "$$f" \
#	--log-file $$b.log --trs-file $$b.trs \
#	$(am__common_driver_flags) $(AM_PY_LOG_DRIVER_FLAGS) $(PY_LOG_DRIVER_FLAGS) -- $(PY_LOG_COMPILE) \
#	"$$tst" $(AM_TESTS_FD_REDIRECT)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS) $(check_SCRIPTS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)
	-test -z "$(TEST_LOGS)" || rm -f $(TEST_LOGS)
	-test -z "$(TEST_LOGS:.log=.trs)" || rm -f $(TEST_LOGS:.log=.trs)
	-test -z "$(TEST_SUITE_LOG)" || rm -f $(TEST_SUITE_LOG)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-local mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-local cscopelist-am \
	ctags-am distclean distclean-generic distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-dvi install-dvi-am install-exec \
	install-exec-am install-html install-html-am install-info \
	install-info-am install-man install-pdf install-pdf-am \
	install-ps install-ps-am install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-generic pdf \
	pdf-am ps ps-am recheck tags-am uninstall uninstall-am

.PRECIOUS: Makefile


include ../../../Makefile.inc
TEST_FORMAT    ?= log,tap
AM_MAKEFLAGS   ?= V=0

.PHONY: tap xml log
tap: $(TEST_SUITE_TAP)
xml: $(TEST_SUITE_XML)
log: $(TEST_SUITE_LOG)

.PHONY: rebuild-tests
rebuild-tests:
	@ \
	echo "//// Rebuilding tests ////"; \
	rm -f *.$(OBJEXT); \
	rm -f $(check_PROGRAMS); \
	if [ -n "$${VALGRIND_BUILD}" ]; then \
	 echo "building clean tests for valgrind"; \
	 $(MAKE) -k $(AM_MAKEFLAGS) all ||:; \
	else \
	 echo "building tests using D_TESTING set"; \
	 $(MAKE) -k $(AM_MAKEFLAGS) all \
	 CFLAGS="${CFLAGS} -D_TESTING" CPPFLAGS="${CPPFLAGS} -D_TESTING" ||:; \
	fi;

.PHONY: tests
tests: rebuild-tests
	@ \
	echo "//// Performing tests /////"; \
	export TEST_FORMAT=${TEST_FORMAT}; \
	status=0; \
	$(MAKE) -k $(AM_MAKEFLAGS) $(TEST_SUITE_LOG) || status=$$?;\
	$(MAKE) -k $(AM_MAKEFLAGS) $${TEST_FORMAT//,/ } || status=$$?; \
	exit $$status

# //////////////////////////////////////////////////////////////////////////// #
# ///  VALGRIND RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

VALGRIND_LIB             ?= 
# //////////////////////////////////////////////////////////////////////////// #
# /// Valgrind check  //////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #
#
# Optional:
#  - VALGRIND_SUPPRESSIONS_FILES: Space-separated list of Valgrind suppressions
#    files to load. (Default: empty)
#  - VALGRIND_FLAGS: General flags to pass to all Valgrind tools.
#    (Default: --num-callers=30)
#  - VALGRIND_$toolname_FLAGS: Flags to pass to Valgrind $toolname (one of:
#    memcheck, helgrind, drd, sgcheck). (Default: various)


# Optional variables
VALGRIND_FLAGS           ?=
VALGRIND_FLAGS           += --num-callers=30 \
                            --trace-children=yes \
                            --child-silent-after-fork=yes \
                            --trace-children-skip-by-arg=*SetMdsplusFileProtection*

VALGRIND_memcheck_FLAGS  ?=
VALGRIND_memcheck_FLAGS  += --leak-check=full --show-reachable=no

VALGRIND_helgrind_FLAGS  ?=
VALGRIND_helgrind_FLAGS  += --history-level=approx

VALGRIND_drd_FLAGS       ?=
VALGRIND_drd_FLAGS       +=

VALGRIND_sgcheck_FLAGS   ?=
VALGRIND_sgcheck_FLAGS   +=

VALGRIND_SUPPRESSIONS    ?=
VALGRIND_SUPPRESSIONS    += $(addprefix --suppressions=,$(VALGRIND_SUPPRESSIONS_FILES))

VALGRIND_SUPPRESSIONS_PY ?=
VALGRIND_SUPPRESSIONS_PY += --suppressions=$(top_srcdir)/conf/valgrind-python.supp \
                            $(addprefix --suppressions=,$(VALGRIND_SUPPRESSIONS_FILES_PY))


VALGRIND_TOOLS ?= memcheck helgrind drd sgcheck


valgrind__test_logs1      = $(if ${VALGRIND_TESTS},${VALGRIND_TESTS},${TESTS})
valgrind__test_logs2      = $(valgrind__test_logs1:=.log)
VALGRIND_LOGS            ?= $(foreach ext,$(TEST_EXTENSIONS),$(valgrind__test_logs2:${ext}.log=.log))


# Internal use
valgrind_log_files = $(addprefix valgrind-suite-,$(addsuffix .log,$(VALGRIND_TOOLS))) \
                     $(TEST_LOGS:.log=-valgrind-*.log) \
                     $(TEST_LOGS:.log=-valgrind-*.xml) \
                     $(TEST_LOGS:.log=-valgrind-*.supp)

valgrind_supp_files = $(addsuffix -valgrind.supp,$(TESTS))

valgrind_memcheck_flags = --tool=memcheck $(VALGRIND_memcheck_FLAGS)
valgrind_helgrind_flags = --tool=helgrind $(VALGRIND_helgrind_FLAGS)
valgrind_drd_flags = --tool=drd $(VALGRIND_drd_FLAGS)
valgrind_sgcheck_flags = --tool=exp-sgcheck $(VALGRIND_sgcheck_FLAGS)

valgrind_quiet   = $(valgrind_quiet_$(V))
valgrind_quiet_  = $(valgrind_quiet_$(AM_DEFAULT_VERBOSITY))
valgrind_quiet_0 = --quiet

# Support running with and without libtool.
ifneq ($(LIBTOOL),)
valgrind_lt = $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=execute
else
valgrind_lt =
endif

#
# Valgrind chain add ons
#
VALGRIND_TESTS_ENVIRONMENT ?=
VALGRIND_TESTS_ENVIRONMENT += \
	VALGRIND=$(VALGRIND) \
	$(if ${VALGRIND_LIB},VALGRIND_LIB=${VALGRIND_LIB}) \
	G_SLICE=always-malloc,debug-blocks \
	G_DEBUG=fatal-warnings,fatal-criticals,gc-friendly

VALGRIND_LOG_COMPILER = \
	$(valgrind_lt) \
	$(VALGRIND) --error-exitcode=1 \
	$(VALGRIND_SUPPRESSIONS)  $(VALGRIND_SUPPRESSIONS_PY) \
	$(valgrind_$(VALGRIND_TOOL)_flags) \
	$(VALGRIND_FLAGS)



.PHONY: tests-valgrind tests-valgrind-tool
.PHONY: tests-valgrind-suppressions tests-valgrind-suppressions-tool
ifeq ($(VALGRIND_ENABLED),yes)


_print_valgrind_hello = \
  echo ""; \
  echo "---------------------------------------------------------------------------"; \
  echo " vagrind $(VALGRIND_TOOL) "; \
  echo " active tool options   :  $(valgrind_$(VALGRIND_TOOL)_flags) "; \
  echo " active valgrind flags : $(VALGRIND_FLAGS) "; \
  echo " active suppressions   : "; \
  for supp in $(VALGRIND_SUPPRESSIONS)  $(VALGRIND_SUPPRESSIONS_PY); do \
    echo "        $${supp}"; \
  done


tests-valgrind:
	@ \
	echo "--- VALGRIND TESTS --- enabled tools: $(foreach tool,$(VALGRIND_TOOLS), $(tool))"; \
	$(MAKE) VALGRIND_BUILD="yes"; \
	$(foreach tool,$(VALGRIND_TOOLS), \
		$(if $(VALGRIND_HAVE_TOOL_$(tool))$(VALGRIND_HAVE_TOOL_exp_$(tool)), \
			$(MAKE) $(AM_MAKEFLAGS) -k tests-valgrind-tool VALGRIND_TOOL=$(tool); \
		) \
	)

tests-valgrind-tool:
	@list="$(VALGRIND_LOGS)";           test -z "$$list" || rm -f $$list
	@list="$(VALGRIND_LOGS:.log=.trs)"; test -z "$$list" || rm -f $$list
	@ $(_print_valgrind_hello);
	@ \
	$(MAKE) -k $(AM_MAKEFLAGS) $(VALGRIND_LOGS) \
	TESTS_ENVIRONMENT="$(VALGRIND_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)" \
	LOG_COMPILER="$(VALGRIND_LOG_COMPILER) -q --log-file=\$$\$$b-valgrind-$(VALGRIND_TOOL)-%p.log --xml=yes --xml-file=\$$\$$b-valgrind-$(VALGRIND_TOOL)-%p.xml $(LOG_COMPILER)" \
	PY_LOG_COMPILER="$(VALGRIND_LOG_COMPILER) -q --log-file=\$$\$$b-valgrind-$(VALGRIND_TOOL)-%p.log --xml=yes --xml-file=\$$\$$b-valgrind-$(VALGRIND_TOOL)-%p.xml $(PY_LOG_COMPILER)" \
	TEST_SUITE_LOG=valgrind-suite-$(VALGRIND_TOOL).log


tests-valgrind-suppressions:
	@ \
	$(MAKE) VALGRIND_BUILD="yes"; \
	$(foreach tool,$(VALGRIND_TOOLS), \
		$(if $(VALGRIND_HAVE_TOOL_$(tool))$(VALGRIND_HAVE_TOOL_exp_$(tool)), \
			$(MAKE) $(AM_MAKEFLAGS) -k tests-valgrind-suppressions-tool VALGRIND_TOOL=$(tool); \
		) \
	)

tests-valgrind-suppressions-tool:
	@list="$(VALGRIND_LOGS)";           test -z "$$list" || rm -f $$list
	@list="$(VALGRIND_LOGS:.log=.trs)"; test -z "$$list" || rm -f $$list
	@ $(_print_valgrind_hello);
	@ \
	$(MAKE) -k $(AM_MAKEFLAGS) $(VALGRIND_LOGS) \
	TESTS_ENVIRONMENT="$(VALGRIND_TESTS_ENVIRONMENT) $(TESTS_ENVIRONMENT)" \
	LOG_COMPILER="$(VALGRIND_LOG_COMPILER) --gen-suppressions=all --log-fd=11 $(LOG_COMPILER)" \
	PY_LOG_COMPILER="$(VALGRIND_LOG_COMPILER) --gen-suppressions=all --log-fd=11 $(PY_LOG_COMPILER)" \
	AM_TESTS_FD_REDIRECT=" 11>&1 | $(AWK) -f $(top_srcdir)/conf/valgrind-parse-suppressions.awk > \$$\$$b-valgrind-$(VALGRIND_TOOL).supp" \
	TEST_SUITE_LOG=valgrind-suite-$(VALGRIND_TOOL).log

else

tests-valgrind tests-valgrind-tool \
tests-valgrind-suppressions tests-valgrind-suppressions-tool:
	@ \
	echo "  ------------------------------------------  "; \
	echo "  Need to reconfigure with --enable-valgrind  "; \
	echo "  ------------------------------------------  ";
endif



DISTCHECK_CONFIGURE_FLAGS ?=
DISTCHECK_CONFIGURE_FLAGS += --disable-valgrind

MOSTLYCLEANFILES ?=
MOSTLYCLEANFILES += $(valgrind_log_files)


# //////////////////////////////////////////////////////////////////////////// #
# ///  SANITIZE RULES  /////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

#  SANITIZE_SUPPRESSIONS ?= suppressions=$(top_srcdir)/testing/sanitizer.supp

#  # // NOTE:
#  # somtimes thread sanitizer does not work with python... probably because of
#  # the -fpie flag for now we will disable it at all.
#  #

# //////////////////////////////////////////////////////////////////////////// #
# ///  TAP TARGET   ////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: $(TEST_SUITE_TAP)

# Single tap output
# ^^^^^^^^^^^^^^^^^
# Tap target to generate single tap result beside the normal log file. This
# should make use of the TEST_TAPFILE env that generate multiple logger
# instances.

$(TEST_LOGS:.log=.tap):
	@ \
	f=$(@:.tap=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_TAPFILE=$@ ||:

# Tap Test Build Suite
# ^^^^^^^^^^^^^^^^^^^^
# Collects the tap result of possible test build failures prior to make the
# actual tests

$(TEST_BUILD_TAP):
	@ \
	echo "Try to build targets one by one"; \
	echo "TAP version 13" > $@; \
	count=0; \
	for i in $(check_PROGRAMS); do \
	  if ! $(MAKE) -q $$i; then \
	    $(MAKE) -k $(AM_MAKEFLAGS) $$i || \
	    { ((count++)); \
	      echo "not ok $${count} - Build of $${i} failed." >> $@; \
	    }; \
	  fi; \
	done; \
	echo "1..$${count}" >> $@;

# Tap Test Suite
# ^^^^^^^^^^^^^^
# The results are collected here using a perl script collate_tap.pl that is
# using the perl tap parser from cpan. If it is not actually available
# configure should have diabled HAVE_PL_TAP_PARSER.
#
# TODO: fix this in the case the only tap is provided as TEST_FORMAT and the
# test taps are streamed into the .log file directly
#

$(TEST_SUITE_TAP): $(TEST_BUILD_TAP) $(TEST_LOGS:.log=.tap)
#	@ ## collate test-build.tap \
#	if [ -n "$(VALGRIND_TOOL)" ]; then suite="$@.$(VALGRIND_TOOL)"; \
#	else suite="$@"; \
#	fi; \
#	perl $(top_srcdir)/testing/collate_tap.pl $(TEST_BUILD_TAP) \
#	     $(TEST_LOGS:.log=.tap) > $${suite} \
#	     || exit 1
	@ ## test parser not available \
	echo "Can not collate tap results" >2;

$(TEST_SUITE_XML):

$(TEST_LOGS:.log=.xml): 
	@ \
	f=$(@:.xml=.log); rm -f $$f; \
	$(MAKE) $(AM_MAKEFLAGS) $$f TEST_XMLFILE=$@ ||:s

# //////////////////////////////////////////////////////////////////////////// #
# ///  clean  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: clean-local-tests
clean-local-tests:
	-$(RM) -rf $(TEST_BUILD_TAP)
	-$(RM) -rf $(TEST_SUITE_TAP)
	-$(RM) -rf $(TEST_LOGS:.log=.tap)
	-$(RM) -rf $(TEST_SUITE_XML)
	-$(RM) -rf $(TEST_LOGS:.log=.xml)

# //////////////////////////////////////////////////////////////////////////// #
# ///  utils  //////////////////////////////////////////////////////////////// #
# //////////////////////////////////////////////////////////////////////////// #

.PHONY: tests-envdump
tests-envdump:
	@echo; \
	echo ----------------------------------------------------------------; \
	echo TESTS_ENVIRONMENT = ;\
	for _i in ${TESTS_ENVIRONMENT}; do \
	 echo "     $${_i}"; \
	done;

#wineconsole:
#	@ \
#	echo "--------------------------------------------------------------"; \
#	echo "%PATH% = $(shell $${TESTS_ENVIRONMENT} wine cmd /c 'echo %PATH%' 2>/dev/null)"; \
#	echo "--------------------------------------------------------------"; \
#	${TESTS_ENVIRONMENT} wineconsole
       #simulateSegfault.py 

clean-local: clean-local-tests

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
